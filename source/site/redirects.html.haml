---
index: false
---

:ruby

  def find_link(title)
    return unless title

    match = sitemap.resources.select do |resource|
      resource.data.wiki_title.to_s.strip == title.strip
    end.first

    match.url if match
  end

  def expand_redirect(title, redir = $REDIRECTS)
    match = redir[title]

    if match
      return expand_redirect(redir[title])
    else
      return title
    end
  end

  yaml_file = sitemap.resources.select do |resource|
    next unless resource
    resource.source_file.match(/redirects.(yml|yaml)$/)
  end.first

  if yaml_file
    redirs = YAML.load_file(yaml_file.source_file)

    $REDIRECTS = redirs[:wiki_redirects]
  end

  $processed ||= redirs[:map].map do |orig, new|
    results = {
      orig: orig,
      found: find_link(orig),
      mw_path: "/#{orig.gsub(/ /, '_')}"
    }
    results[:found_redir] = find_link(expand_redirect(orig)) unless results[:found]

    results
  end.sort_by { |i| i[:found] || i[:found_redir] || i[:orig] }

=link_to '&larr; Back to site tools', '/site/'

%h1 MediaWiki redirects

:markdown
  Notes:

  - Bold links == remapped
  - When pages aren't found, it's sometimes intentional
    - The page could be MediaWiki specific
    - The page might be irrelevant
    - Unfound pages will redirect to 404, triggering a search based on
      the page's URL (converted to keywords)

-# %pre= redirs[:map].to_yaml

- if $processed
  %table.sortable.table
    %thead
      %tr
        %th
        %th Page title
        %th{'data-defaultsort' => 'asc'} New path

    %tbody
      -# redirs[:map].each do |orig, new|
      - $processed.each do |item|
        %tr
          %td
            %a{href: "http://ovirt.org/#{item[:orig]}", target: "_blank"}
              %span.fa-external-link{title: "view the link on oVirt.org", target: "_blank"}

          %td
            %a{href: item[:mw_path], title: "local link â€” should be remapped to new path via Apache .htaccess rules", target: "_blank"}
              = item[:orig]

          %td
            - if item[:found]
              %a{href: item[:found]}= item[:found]
            - else
              - if item[:found_redir]
                %strong
                  %a{href: item[:found_redir]}= item[:found_redir]
              - else
                %strong NO PAGE FOUND

- content_for :tail do
  :coffee
    jQuery.bootstrapSortable('table')
